@page "/items"
@using KriosManufacturing.Core.Models
@inject HttpClient Http

<PageTitle>Items</PageTitle>

<div class="d-flex justify-space-between">
<h1 class="my-5">All Items</h1>
<MudButton Class="my-5" Href="/items/new" Variant="Variant.Filled" Color="Color.Tertiary">
    <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.Add" />
    Add an Item
</MudButton>
</div>

@if (items is null || !items.Any())
{
    <p>
    <em>Loading...</em>
</p>
}
else
{
    <MudTable Bordered="true" FixedHeader="true" Dense="true" ReadOnly="true" Items="items" Hover="true" SortLabel="Sort By"
    Elevation="3">
    <HeaderContent>
        <MudTh Style="width:100px"></MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Item, object>(x => x.Id)">Id
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Item, object>(x => x.Sku)">Sku</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Item, object>(x => x.Name)">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Item, object>(x => x.Description!)">Description</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton title="Edit" Href="@($"/items/{@context.Id}/edit")" Size="Size.Small"
                Icon="@Icons.Material.Filled.EditNote" aria-label="edit" />
            <MudIconButton title="Details" Href="@($"/items/{@context.Id}")" Size="Size.Small"
                Icon="@Icons.Material.Filled.Notes" aria-label="details" />
        </MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Sku">@context.Sku</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
    </RowTemplate>
</MudTable>
}

@code {
    private IEnumerable<Item>? items = new List<Item>();

    protected override async Task OnInitializedAsync()
    {
        items = await Http.GetFromJsonAsync<List<Item>?>("/api/v1/items");
    }

}