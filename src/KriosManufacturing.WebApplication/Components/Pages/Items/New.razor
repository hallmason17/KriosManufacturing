@page "/items/new"
@using System.ComponentModel.DataAnnotations
@using KriosManufacturing.Core.Models
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject ILogger<New> logger

<PageTitle>Item</PageTitle>

<h1>New Item</h1>
<MudButton Class="my-5" Href="/items" Variant="Variant.Filled" Color="Color.Tertiary">
    <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.ArrowBack" />
    All items
</MudButton>

<EditForm Model="@_newForm" OnValidSubmit="Submit" FormName="NewItemForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Sku" HelperText="Required. Max 64 characters." @bind-Value="_newForm.Sku"
                    For="@(() => _newForm.Sku)" />
                <MudTextField Label="Name" Class="mt-3" HelperText="Required. Max 128 characters."
                    @bind-Value="_newForm.Name" For="@(() => _newForm.Name)" />
                <MudTextField Label="Description" Class="mt-3" HelperText="Optional. Max 256 characters."
                    @bind-Value="_newForm.Description" For="@(() => _newForm.Description)" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                    Class="ml-auto">Submit</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</EditForm>

@code {
    private Item _item = new();
    private NewForm _newForm = new();

    public class NewForm
    {
        [Required][StringLength(64)] public string Sku { get; set; }

        [Required][StringLength(128)] public string Name { get; set; }

        [StringLength(256)] public string? Description { get; set; }
    }

    private async Task Submit()
    {
        _item.Sku = _newForm.Sku;
        _item.Name = _newForm.Name;
        _item.Description = _newForm.Description;
        var result = await Http.PostAsJsonAsync($"/api/v1/items", _item);
        logger.LogInformation(result.ToString());
        if (result.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("items");
        }
    }
}